<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>binary search on sleepingsaint</title><link>https://sleepingsaint.github.io/blog/tags/binary-search/</link><description>Recent content in binary search on sleepingsaint</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 31 Aug 2021 14:02:23 +0530</lastBuildDate><atom:link href="https://sleepingsaint.github.io/blog/tags/binary-search/index.xml" rel="self" type="application/rss+xml"/><item><title>Find Minimum in Rotated Sorted Array</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/find-minimum-in-rotated-sorted-array/</link><pubDate>Tue, 31 Aug 2021 14:02:23 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/find-minimum-in-rotated-sorted-array/</guid><description>Question Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
[4,5,6,7,0,1,2] if it was rotated 4 times. [0,1,2,4,5,6,7] if it was rotated 7 times. Notice that rotating an array [a[0], a[1], a[2], &amp;hellip;, a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], &amp;hellip;, a[n-2]].
Given the sorted rotated array nums of unique elements, return the minimum element of this array.</description></item></channel></rss>