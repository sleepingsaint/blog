<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hashmap on sleepingsaint</title><link>https://sleepingsaint.github.io/blog/tags/hashmap/</link><description>Recent content in hashmap on sleepingsaint</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 Aug 2021 01:45:42 +0530</lastBuildDate><atom:link href="https://sleepingsaint.github.io/blog/tags/hashmap/index.xml" rel="self" type="application/rss+xml"/><item><title>Longest Uncommon Subsequence</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/longest-uncommon-subsequence/</link><pubDate>Sun, 29 Aug 2021 01:45:42 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/longest-uncommon-subsequence/</guid><description>Question Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.
An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.
A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.</description></item><item><title>Two Sum IV Input Is a Bst</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/two-sum-iv-input-is-a-bst/</link><pubDate>Mon, 23 Aug 2021 15:35:01 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/two-sum-iv-input-is-a-bst/</guid><description>Question Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.
Examples Input: root = [5,3,6,2,4,null,7], k = 9 Output: true
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
Input: root = [2,1,3], k = 4
Output: true
Input: root = [2,1,3], k = 1
Output: false</description></item><item><title>Minimum Window Substring</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/minimum-window-substring/</link><pubDate>Mon, 16 Aug 2021 13:23:57 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/minimum-window-substring/</guid><description>Question Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string &amp;ldquo;&amp;rdquo;.
The testcases will be generated such that the answer is unique.
A substring is a contiguous sequence of characters within the string.
Examples Input: s = &amp;ldquo;ADOBECODEBANC&amp;rdquo;, t = &amp;ldquo;ABC&amp;rdquo;</description></item><item><title>Group Anagrams</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/group-anagrams/</link><pubDate>Thu, 12 Aug 2021 14:09:06 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/group-anagrams/</guid><description>Question Given an array of strings strs, group the anagrams together. You can return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
Examples Input: strs = [&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;,&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;bat&amp;rdquo;]
Output: [[&amp;ldquo;bat&amp;rdquo;],[&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;],[&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;]]
Input: strs = [&amp;quot;&amp;quot;]
Output: [[&amp;quot;&amp;quot;]]
Input: strs = [&amp;ldquo;a&amp;rdquo;]
Output: [[&amp;ldquo;a&amp;rdquo;]]
Constraints 1 &amp;lt;= strs.length &amp;lt;= 104 0 &amp;lt;= strs[i].</description></item><item><title>Array of Doubled Pairs</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/array-of-doubled-pairs/</link><pubDate>Wed, 11 Aug 2021 19:53:05 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/array-of-doubled-pairs/</guid><description>Question Given an array of integers arr of even length, return true if and only if it is possible to reorder it such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 &amp;lt;= i &amp;lt; len(arr) / 2.
Examples Input: arr = [3,1,3,6]
Output: false
Input: arr = [2,1,2,6]
Output: false
Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].</description></item><item><title>Subsets 2</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/subsets-2/</link><pubDate>Tue, 03 Aug 2021 13:33:12 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/subsets-2/</guid><description>Question Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.
Examples Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]] Input: nums = [0] Output: [[],[0]] Constraints 1 &amp;lt;= nums.length &amp;lt;= 10 -10 &amp;lt;= nums[i] &amp;lt;= 10 Explanation This problem is similar to generating all the subsets but catch is to avoid duplicate subsets.</description></item><item><title>Two Sum</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/two-sum/</link><pubDate>Mon, 02 Aug 2021 12:51:20 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/two-sum/</guid><description>Question Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Examples Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1].</description></item><item><title>Map Sum Pairs</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/map-sum-pairs/</link><pubDate>Fri, 30 Jul 2021 21:36:35 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/map-sum-pairs/</guid><description>Map Sum Pairs Question Implement the MapSum class:
MapSum() Initializes the MapSum object. void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one. int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix. Constraints Constraints:</description></item></channel></rss>