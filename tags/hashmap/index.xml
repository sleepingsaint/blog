<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hashmap on sleepingsaint</title><link>https://sleepingsaint.github.io/blog/tags/hashmap/</link><description>Recent content in hashmap on sleepingsaint</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Aug 2021 13:33:12 +0530</lastBuildDate><atom:link href="https://sleepingsaint.github.io/blog/tags/hashmap/index.xml" rel="self" type="application/rss+xml"/><item><title>Subsets 2</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/subsets-2/</link><pubDate>Tue, 03 Aug 2021 13:33:12 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/subsets-2/</guid><description>Question Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.
Examples Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
Input: nums = [0] Output: [[],[0]]
Constraints 1 &amp;lt;= nums.length &amp;lt;= 10 -10 &amp;lt;= nums[i] &amp;lt;= 10 Explanation This problem is similar to generating all the subsets but catch is to avoid duplicate subsets.</description></item><item><title>Two Sum</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/two-sum/</link><pubDate>Mon, 02 Aug 2021 12:51:20 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/two-sum/</guid><description>Question Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Examples Input: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1].</description></item><item><title>Map Sum Pairs</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/map-sum-pairs/</link><pubDate>Fri, 30 Jul 2021 21:36:35 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/map-sum-pairs/</guid><description>Map Sum Pairs Question Implement the MapSum class:
MapSum() Initializes the MapSum object. void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one. int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix. Constraints Constraints:</description></item></channel></rss>