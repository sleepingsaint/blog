<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>string on sleepingsaint</title><link>https://sleepingsaint.github.io/blog/tags/string/</link><description>Recent content in string on sleepingsaint</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 Aug 2021 13:58:03 +0530</lastBuildDate><atom:link href="https://sleepingsaint.github.io/blog/tags/string/index.xml" rel="self" type="application/rss+xml"/><item><title>Complex Number Multiplication</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/complex-number-multiplication/</link><pubDate>Tue, 24 Aug 2021 13:58:03 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/complex-number-multiplication/</guid><description>Question A complex number can be represented as a string on the form &amp;ldquo;real+imaginaryi&amp;rdquo; where:
real is the real part and is an integer in the range [-100, 100]. imaginary is the imaginary part and is an integer in the range [-100, 100]. i^2 == -1. Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.
Examples Input: num1 = &amp;ldquo;1+1i&amp;rdquo;, num2 = &amp;ldquo;1+1i&amp;rdquo;</description></item><item><title>Decode Ways</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/decode-ways/</link><pubDate>Wed, 18 Aug 2021 16:33:01 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/decode-ways/</guid><description>Question A message containing letters from A-Z can be encoded into numbers using the following mapping:
&amp;lsquo;A&amp;rsquo; -&amp;gt; &amp;ldquo;1&amp;rdquo; &amp;lsquo;B&amp;rsquo; -&amp;gt; &amp;ldquo;2&amp;rdquo; &amp;hellip; &amp;lsquo;Z&amp;rsquo; -&amp;gt; &amp;ldquo;26&amp;rdquo;
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, &amp;ldquo;11106&amp;rdquo; can be mapped into:
&amp;ldquo;AAJF&amp;rdquo; with the grouping (1 1 10 6) &amp;ldquo;KJF&amp;rdquo; with the grouping (11 10 6) Note that the grouping (1 11 06) is invalid because &amp;ldquo;06&amp;rdquo; cannot be mapped into &amp;lsquo;F&amp;rsquo; since &amp;ldquo;6&amp;rdquo; is different from &amp;ldquo;06&amp;rdquo;.</description></item><item><title>Minimum Window Substring</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/minimum-window-substring/</link><pubDate>Mon, 16 Aug 2021 13:23:57 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/minimum-window-substring/</guid><description>Question Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string &amp;ldquo;&amp;rdquo;.
The testcases will be generated such that the answer is unique.
A substring is a contiguous sequence of characters within the string.
Examples Input: s = &amp;ldquo;ADOBECODEBANC&amp;rdquo;, t = &amp;ldquo;ABC&amp;rdquo;</description></item><item><title>Group Anagrams</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/group-anagrams/</link><pubDate>Thu, 12 Aug 2021 14:09:06 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/group-anagrams/</guid><description>Question Given an array of strings strs, group the anagrams together. You can return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
Examples Input: strs = [&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;,&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;bat&amp;rdquo;]
Output: [[&amp;ldquo;bat&amp;rdquo;],[&amp;ldquo;nat&amp;rdquo;,&amp;ldquo;tan&amp;rdquo;],[&amp;ldquo;ate&amp;rdquo;,&amp;ldquo;eat&amp;rdquo;,&amp;ldquo;tea&amp;rdquo;]]
Input: strs = [&amp;quot;&amp;quot;]
Output: [[&amp;quot;&amp;quot;]]
Input: strs = [&amp;ldquo;a&amp;rdquo;]
Output: [[&amp;ldquo;a&amp;rdquo;]]
Constraints 1 &amp;lt;= strs.length &amp;lt;= 104 0 &amp;lt;= strs[i].</description></item><item><title>Add Strings</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/add-strings/</link><pubDate>Mon, 09 Aug 2021 14:48:21 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/add-strings/</guid><description>Question Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.
You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.
Examples Input: num1 = &amp;ldquo;11&amp;rdquo;, num2 = &amp;ldquo;123&amp;rdquo;
Output: &amp;ldquo;134&amp;rdquo;
Input: num1 = &amp;ldquo;456&amp;rdquo;, num2 = &amp;ldquo;77&amp;rdquo;
Output: &amp;ldquo;533&amp;rdquo;
Input: num1 = &amp;ldquo;0&amp;rdquo;, num2 = &amp;ldquo;0&amp;rdquo;</description></item><item><title>Palindrome Partitioning 2</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/palindrome-partitioning-2/</link><pubDate>Sat, 07 Aug 2021 18:57:45 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/palindrome-partitioning-2/</guid><description>Question Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.
Examples Input: s = &amp;ldquo;aab&amp;rdquo;
Output: 1
Explanation: The palindrome partitioning [&amp;ldquo;aa&amp;rdquo;,&amp;ldquo;b&amp;rdquo;] could be produced using 1 cut.
Input: s = &amp;ldquo;a&amp;rdquo;
Output: 0
Input: s = "ab" Output: 1
Constraints 1 &amp;lt;= s.length &amp;lt;= 2000 s consists of lower-case English letters only.</description></item></channel></rss>