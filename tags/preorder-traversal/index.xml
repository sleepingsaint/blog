<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>preorder traversal on sleepingsaint</title><link>https://sleepingsaint.github.io/blog/tags/preorder-traversal/</link><description>Recent content in preorder traversal on sleepingsaint</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 26 Aug 2021 20:09:20 +0530</lastBuildDate><atom:link href="https://sleepingsaint.github.io/blog/tags/preorder-traversal/index.xml" rel="self" type="application/rss+xml"/><item><title>Verify Preorder Serialization of Binary Tree</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/verify-preorder-serialization-of-binary-tree/</link><pubDate>Thu, 26 Aug 2021 20:09:20 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/verify-preorder-serialization-of-binary-tree/</guid><description>Question One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node&amp;rsquo;s value. If it is a null node, we record using a sentinel value such as &amp;lsquo;#&amp;rsquo;.
For example, the above binary tree can be serialized to the string &amp;ldquo;9,3,4,#,#,1,#,#,2,#,6,#,#&amp;rdquo;, where &amp;lsquo;#&amp;rsquo; represents a null node.
Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.</description></item></channel></rss>