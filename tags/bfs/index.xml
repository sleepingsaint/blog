<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bfs on sleepingsaint</title><link>https://sleepingsaint.github.io/blog/tags/bfs/</link><description>Recent content in bfs on sleepingsaint</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 Aug 2021 12:59:53 +0530</lastBuildDate><atom:link href="https://sleepingsaint.github.io/blog/tags/bfs/index.xml" rel="self" type="application/rss+xml"/><item><title>N Array Level Order Traversal</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/n-array-level-order-traversal/</link><pubDate>Fri, 06 Aug 2021 12:59:53 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/n-array-level-order-traversal/</guid><description>Question Given an n-ary tree, return the level order traversal of its nodes' values.
Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).
Examples Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
Constraints The height of the n-ary tree is less than or equal to 1000 The total number of nodes is between [0, 104] Explanation Level Order Traversal As the name suggests we travese the tree level wise, first the root, then all the children of the root, then children of children of the root and so on.</description></item><item><title>01 Matrix</title><link>https://sleepingsaint.github.io/blog/series/leetcode-daily/01-matrix/</link><pubDate>Sat, 31 Jul 2021 13:00:13 +0530</pubDate><guid>https://sleepingsaint.github.io/blog/series/leetcode-daily/01-matrix/</guid><description>Question Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
The distance between two adjacent cells is 1.
Examples Input: mat = [[0,0,0],[0,1,0],[0,0,0]] Output: [[0,0,0],[0,1,0],[0,0,0]]
Input: mat = [[0,0,0],[0,1,0],[1,1,1]] Output: [[0,0,0],[0,1,0],[1,2,1]]
Constraints m == mat.length n == mat[i].length 1 &amp;lt;= m, n &amp;lt;= 104 1 &amp;lt;= m * n &amp;lt;= 104 mat[i][j] is either 0 or 1. There is at least one 0 in mat.</description></item></channel></rss>